<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--学习 https://blog.csdn.net/ZYC88888/article/details/85060315-->

    <!--
     格式化输出：%d表示日期，
     %thread表示线程名，
     %-5level：级别从左显示5个字符宽度,
     %logger{50} 表示 Logger 名字最长36个字符,
     %msg：日志消息，
     %M : 日志输出所在方法名
     %L : 日志输出所在行数
     %n是换行符 -->
    -->
    <property name="log_pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level -[%-32X{REQ_UID}] - %msg  -%logger{50}.%M[%L]%n "/>
    <property name="log_path" value="/Users/zhangyujin1/Desktop/logs/hlj-logback"/>
    <property name="info_file_path"  value="${log_path}/hlj-logback.log"/>
    <property name="error_file_path" value="${log_path}/hlj-logback-error.log"/>
    <property name="biz_file_path" value="${log_path}/hlj-logback-biz.log"/>

    <!--控制台-->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="com.hlj.proj.controller.config.LogbackJsonFilter"/>
        <encoder charset="UTF-8"  >
            <pattern>${log_pattern}</pattern>
        </encoder>
    </appender>


    <appender name="default_appender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件输出的文件名 -->
        <File>${info_file_path}</File>
        <!--滚动日志 是基于时间和大小的滚动策略，它可以满足几乎所有的日志滚动需求场景。这种策略允许您根据日志文件的大小和时间来触发滚动，从而有效地管理日志文件。 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 滚动日志文件保存格式 i是超出文件大小MaxFileSize 讲历史日志后缀名从0开始起步，如果超过了最大的totalSizeCap，删除最旧的文件，直到满足条件-->
            <FileNamePattern>${info_file_path}.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <!-- 单个日志文件的最大：单个文件500MB更易于查看和分析 -->
            <MaxFileSize>512MB</MaxFileSize>
            <!-- 所有日志文件最大： 限制日志文件占用的总磁盘空间，建议设置为磁盘目录大小的`80%`或更小，以留出一定的磁盘空间用于其他操作。这样可以避免日志文件占用过多的磁盘空间，导致系统性能下降或磁盘空间不足的问题B -->
            <!-- 说明：磁盘空间共计50GB，保留30%的磁盘空间(15GB)给系统和其他应用 30G-->
            <totalSizeCap>30GB</totalSizeCap>
            <!--日志最大的历史 10天 -->
            <MaxHistory>10</MaxHistory>
        </rollingPolicy>
        <!-- 按临界值过滤日志：低于INFO以下级别被抛弃 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter> 
        <encoder>
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
            <pattern>${log_pattern}</pattern>
        </encoder>
    </appender>
    <appender name="default_async_appender" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 设置异步日志队列的容量：更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>4096</queueSize>
        <!-- 定义何时开始丢弃低级别日志：队列剩余容量小于discardingThreshold,则会丢弃TRACT、DEBUG、INFO级别的日志;默认值-1,为queueSize的20%;0不丢失日志 -->
        <discardingThreshold>-1</discardingThreshold>
        <!-- 是否阻塞，默认：false，如果系统异常之后，error级别的日志把队列占满了，会出现阻塞情况。可以设置为true，丢弃日志，从而不影响业务线程。 -->
        <neverBlock>true</neverBlock>
        <!--是否收集调用者信息（类名、方法名、行号等）-->
        <includeCallerData>true</includeCallerData>
        <!-- 一个异步appender 只能对应一个同步的appender。 -->
        <appender-ref ref="default_appender"/>
    </appender>



    <appender name="error_appender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${error_file_path}</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <FileNamePattern>${error_file_path}.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <!-- 单个日志文件的最大：单个文件500MB更易于查看和分析 -->
            <MaxFileSize>512MB</MaxFileSize>
            <!-- 所有日志文件最大： 限制日志文件占用的总磁盘空间，建议设置为磁盘目录大小的`80%`或更小，以留出一定的磁盘空间用于其他操作。这样可以避免日志文件占用过多的磁盘空间，导致系统性能下降或磁盘空间不足的问题B -->
            <!-- 说明：磁盘空间共计50GB，保留30%的磁盘空间(15GB)给系统和其他应用 30G-->
            <totalSizeCap>30GB</totalSizeCap>
            <!--日志最大的历史 10天 -->
            <MaxHistory>10</MaxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder>
            <pattern>${log_pattern}</pattern>
        </encoder>
    </appender>
    <appender name="async_error_appender" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 设置异步日志队列的容量：更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>4096</queueSize>
        <!-- 定义何时开始丢弃低级别日志：队列剩余容量小于discardingThreshold,则会丢弃TRACT、DEBUG、INFO级别的日志;默认值-1,为queueSize的20%;0不丢失日志 -->
        <discardingThreshold>-1</discardingThreshold>
        <!-- 是否阻塞，默认：false，如果系统异常之后，error级别的日志把队列占满了，会出现阻塞情况。可以设置为true，丢弃日志，从而不影响业务线程。 -->
        <neverBlock>true</neverBlock>
        <!--是否收集调用者信息（类名、方法名、行号等）-->
        <includeCallerData>true</includeCallerData>
        <!-- 一个异步appender 只能对应一个同步的appender。 -->
        <appender-ref ref="error_appender"/>
    </appender>



     <!--自定义业务日志目录-->
    <appender name="biz_appender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${biz_file_path}</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <FileNamePattern>${biz_file_path}.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <!-- 单个日志文件的最大：单个文件500MB更易于查看和分析 -->
            <MaxFileSize>512MB</MaxFileSize>
            <!-- 所有日志文件最大： 限制日志文件占用的总磁盘空间，建议设置为磁盘目录大小的`80%`或更小，以留出一定的磁盘空间用于其他操作。这样可以避免日志文件占用过多的磁盘空间，导致系统性能下降或磁盘空间不足的问题B -->
            <!-- 说明：磁盘空间共计50GB，保留30%的磁盘空间(15GB)给系统和其他应用 30G-->
            <totalSizeCap>30GB</totalSizeCap>
            <!--日志最大的历史 10天 -->
            <MaxHistory>10</MaxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log_pattern}</pattern>
        </encoder>
    </appender>
    <appender name="async_biz_appender" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 设置异步日志队列的容量：更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>4096</queueSize>
        <!-- 定义何时开始丢弃低级别日志：队列剩余容量小于discardingThreshold,则会丢弃TRACT、DEBUG、INFO级别的日志;默认值-1,为queueSize的20%;0不丢失日志 -->
        <discardingThreshold>-1</discardingThreshold>
        <!-- 是否阻塞，默认：false，如果系统异常之后，error级别的日志把队列占满了，会出现阻塞情况。可以设置为true，丢弃日志，从而不影响业务线程。 -->
        <neverBlock>true</neverBlock>
        <!--是否收集调用者信息（类名、方法名、行号等）-->
        <includeCallerData>true</includeCallerData>
        <!-- 一个异步appender 只能对应一个同步的appender。 -->
        <appender-ref ref="biz_appender"/>
    </appender>




    <!-- 自定义输出 -->
    <appender name="mq_appender"  class="com.hlj.proj.controller.log.plugin.MqAppender">
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <evaluator class="ch.qos.logback.classic.boolex.OnMarkerEvaluator">
                <marker>marker_mq_log</marker>
            </evaluator>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 日志收集最低日志级别 -->
            <level>INFO</level>
        </filter>
        <layout
            class="ch.qos.logback.classic.PatternLayout">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </layout>
        <!-- 自定义参数 -->
        <params>healer_jean:</params>
    </appender>


    
    <logger name="biz_log" additivity="false" level="INFO">
        <appender-ref ref="async_biz_appender"/>
    </logger>

    <!--以配置文件application.properties 中为主，如果配置文件中不存在以它为主-->
    <root level="debug">
        <appender-ref ref="stdout" />
        <appender-ref ref="default_async_appender"/>
        <appender-ref ref="async_error_appender"/>
        <appender-ref ref="mq_appender"/>
    </root>
</configuration>




