## 必填内容，info/all/.., stdout 为必填，后面的根据log4j.appender.内容进行填写，如果下面有内容则，这里必须加上，
#  level 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者自定义的级别。
log4j.rootLogger=info, stdout, log, errorlog,proj



#%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
#%t: 输出产生该日志事件的线程名
#%C: 输出日志信息所属的类目，通常就是所在类的全名
#%M: 输出代码中指定的消息,产生的日志具体信息
#%F: 输出日志消息产生时所在的文件名称
#%L: 输出代码中的行号
#%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
#%r: 输出自应用启动到输出该log信息耗费的毫秒数
#%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
#%%: 输出一个”%”字符
#%n: 输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”输出日志信息换行
#%hostName : 本地机器名
#%hostAddress : 本地ip地址-->
#可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
#1) c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
#2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，”-”号指定左对齐。
#3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
#4) .30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉


# RollingFileAppender按log文件最大长度限度生成新文件
# DailyRollingFileAppender按日期生成新文件,不能根据大小清除历史日志，但是我们可以自定义来实现

# %d{yyyy-MM-dd HH:mm:ss,SSS}日期    %p級別 %t当前线程名称   %m日志信息   [%C.%M]类名加方法    %L行数 %n换行
# 举例 # 2019-07-13 09:05:14,674  [INFO]-[http-nio-8888-exec-1] info日志==================  com.hlj.proj.controler.Log4jController.log4j][25]



# 控制台输出
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS}  [%p]-[%t] %m  %C.%M][%L] %n




## 根据日期生成配置文件当前log.log 如果时间超过了设置的格式的时间DatePattern 则会在后面加上    log.log.2019-07-12.log
#  解释：也就是说log文件会暂存每天的日志，到第二天时会再加上yyyy-MM，产生当天的完整日志文件
### Log info
log4j.appender.log = org.apache.log4j.DailyRollingFileAppender
log4j.appender.log.File = /Users/healerjean/Desktop/logs/hlj-log4j.log
log4j.appender.log.Append = true
log4j.appender.log.Threshold = INFO
#超过日期则讲历史日志加上后缀日期用于区分
log4j.appender.log.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.log.layout = org.apache.log4j.PatternLayout
log4j.appender.log.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS}  [%p]-[%t] %m  %C.%M][%L] %n





## 5  按照文件大小进行日志切分 文件历史日志依次 error.log.1 error.log.2
log4j.appender.errorlog=org.apache.log4j.RollingFileAppender
log4j.appender.errorlog.File=/Users/healerjean/Desktop/logs/error.log
log4j.appender.errorlog.Append=true
log4j.appender.errorlog.Threshold=error
#设置日志文件的大小
log4j.appender.errorlog.MaxFileSize=2000KB
#保存200个备份文件
log4j.appender.errorlog.MaxBackupIndex=200
log4j.appender.errorlog.layout=org.apache.log4j.PatternLayout
log4j.appender.errorlog.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS}   [%p]-[%t] %m  %C.%M][%L %n



log4j.appender.proj=com.hlj.proj.utils.RoolingAndDateFileAppender
log4j.appender.proj.file=/Users/healerjean/Desktop/logs/logRecoed.log
log4j.appender.proj.Append=true
log4j.appender.proj.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.proj.Threshold=error
#设置日志文件的大小
log4j.appender.proj.MaxFileSize=5KB
#最大保留多少个文件，超过之后会进行重新命名，所以尽量不要超过
log4j.appender.proj.maxIndex=10
#只保留多长时间的
log4j.appender.proj.expirDays=1
log4j.appender.proj.layout=org.apache.log4j.PatternLayout
log4j.appender.proj.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS}  [%p]-[%t] %m  %C.%M][%L] %n

















## 1
log4j.rootLogger=info, stdout, log, errorlog ,ROLLING_FILE,warnlog
#log4j.Logger=search,Test  
#log4j.category.com.hlj.log4j=error, stdout
log4j.logger.com.hlj.log4j=debug, stdout
#log4j.additivity.com.hlj.log4j= false
## 2 
###Console  print infomation to console ,--> must exist###  
log4j.appender.stdout = org.apache.log4j.ConsoleAppender  
log4j.appender.stdout.Target = System.out  
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout  
#log4j.appender.stdout.layout.ConversionPattern =  %d{ABSOLUTE} [ %t ] [ %p ]:%L - %m%n  
log4j.appender.stdout.layout.ConversionPattern =  %d{yyyy-MM-dd HH:mm:ss}[%x][%t] %p [%c] %m%n
  
## 3    
### Log ###    
log4j.appender.log = org.apache.log4j.DailyRollingFileAppender  
log4j.appender.log.File = log/log.log  
log4j.appender.log.Append = true  
log4j.appender.log.Threshold = INFO  
log4j.appender.log.DatePattern='.'yyyy-MM-dd  
log4j.appender.log.layout = org.apache.log4j.PatternLayout  
log4j.appender.log.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss}[%x][%t] %p [%c] %m%n

## 4  
### Error ###  
log4j.appender.errorlog = org.apache.log4j.DailyRollingFileAppender  
log4j.appender.errorlog.File = log/error.log  
log4j.appender.errorlog.Append = true  
log4j.appender.errorlog.Threshold = ERROR   
log4j.appender.errorlog.DatePattern='.'yyyy-MM-dd  
log4j.appender.errorlog.layout = org.apache.log4j.PatternLayout  
log4j.appender.errorlog.layout.ConversionPattern =%d{yyyy-MM-dd HH:mm:ss}[%x][%t] %p [%c] %m%n
  
## 5  
### debug \u63A7\u5236\u53F0\u4FE1\u606F###  
log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender
log4j.appender.ROLLING_FILE.File=log/debug.log
log4j.appender.ROLLING_FILE.Append=true
log4j.appender.ROLLING_FILE.Threshold=debug
log4j.appender.ROLLING_FILE.MaxFileSize=2000KB
log4j.appender.ROLLING_FILE.MaxBackupIndex=200
log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.ROLLING_FILE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss}[%x][%t] %p [%c] %m%n

## 6  
### warn \u63A7\u5236\u53F0\u4FE1\u606F###  
warn=\u63A7\u5236\u53F0\u4FE1\u606F
log4j.appender.warnlog=org.apache.log4j.RollingFileAppender
log4j.appender.warnlog.File=log/warn.log
log4j.appender.warnlog.Append=true
log4j.appender.warnlog.Threshold=WARN
log4j.appender.warnlog.MaxFileSize=200KB
log4j.appender.warnlog.MaxBackupIndex=200
log4j.appender.warnlog.layout=org.apache.log4j.PatternLayout
log4j.appender.warnlog.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss}[%x][%t] %p [%c] %m%n
  
  
# sinoSoft
log4j.category.org.springframework.jdbc.core=info
log4j.category.org.hibernate.SQL=info
log4j.category.org.hibernate.impl.SessionImpl=info
log4j.category.com.ibatis=debug
log4j.category.java.sql=debug,stdout,ROLLING_FILE
#log4j.category.org.springframework.transaction=debug,stdout
 
 # sino mybatis
log4j.logger.java.sql.ResultSet=INFO
log4j.logger.org.apache=INFO
log4j.logger.java.sql.Connection=DEBUG
log4j.logger.java.sql.Statement=DEBUG
log4j.logger.java.sql.PreparedStatement=DEBUG 




