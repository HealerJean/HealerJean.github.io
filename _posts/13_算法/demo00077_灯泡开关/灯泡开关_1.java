package com.hlj.arith.demo00077_灯泡开关;

import org.junit.Test;

/**
作者：HealerJean
题目：灯泡开关
 初始时有 n 个灯泡关闭。 第 1 轮，你打开所有的灯泡。 第 2 轮，每两个灯泡你关闭一次。 第 3 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关闭）。第 i 轮，每 i 个灯泡切换一次开关。 对于第 n 轮，你只切换最后一个灯泡的开关。 找出 n 轮后有多少个亮着的灯泡。
     示例:
         输入: 3
         输出: 1
         解释:
         初始时, 灯泡状态 [关闭, 关闭, 关闭].
         第一轮后, 灯泡状态 [开启, 开启, 开启].
         第二轮后, 灯泡状态 [开启, 关闭, 开启].
         第三轮后, 灯泡状态 [开启, 关闭, 关闭].
         你应该返回 1，因为只有一个灯泡还亮着。
解题思路：
 对于位置在i的灯，第1次，它被打开；
 第2次，如果它在2的倍数的位置上，它被关闭；
 第3次，如果它在3的倍数的位置上，它将被操作（打开或关闭）；
 ......
 第1次和第2次，也可以认为被操作（打开或关闭）。
 它最终的状态，就是看它被操作过的次数：如果次数是奇数次，它最终是亮着的，如果是偶数次，最终是关闭的。

 对于任意的数i，也就是求它的因子的个数，然后再判断个数的奇偶性，假设i=ab，a和b总是成对出现的，即因子数为偶数。
 但也有个例外，也就是a=b的时候，它的因子数，就会是奇数。而其他不等的时候，总是成对的，即偶数，可以忽略。
 所以，n个灯，n次操作后，求亮灯的个数，就是看1~n，有多少上个数，可以写成aa的形式。

 */
public class 灯泡开关_1 {

    @Test
    public void test(){
        System.out.println(bulbSwitch(8));
    }

    /**
     * 因此只有那些因数个数为奇数的灯是开着的
     */
    public int bulbSwitch(int n) {
        int count  = 0;
        for (int i = 1 ; i * i <=n ; i++){
            count  = i  ;
        }
        return count;
    }
}
